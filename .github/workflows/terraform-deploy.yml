name: Deploy Infrastructure

on:
  push:
    branches: [main, develop]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - '**.tf'
      - '**.tfvars'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: eu-west-1
  TF_VAR_region: eu-west-1

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'test' }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        role-session-name: GitHubActions-Terraform
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        ENV=${{ github.event.inputs.environment || 'test' }}
        terraform plan -var-file=environments/${ENV}.tfvars -out=tfplan -no-color
      continue-on-error: true

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan üìñ
          
          **Environment:** \`${{ github.event.inputs.environment || 'test' }}\`
          **Plan Status:** \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: (github.event.inputs.action == 'apply' || github.event_name == 'push') && github.ref == 'refs/heads/main'
      run: terraform apply tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        ENV=${{ github.event.inputs.environment || 'test' }}
        terraform destroy -var-file=environments/${ENV}.tfvars -auto-approve

    - name: Output Infrastructure Details
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      run: |
        echo "üéØ Infrastructure Deployment Complete!"
        echo "=================================="
        
        echo "üìä Cluster Information:"
        terraform output cluster_id || echo "Cluster ID not available"
        terraform output cluster_endpoint || echo "Cluster endpoint not available"
        
        echo "üìä ECR Repository:"
        terraform output ecr_repository_url || echo "ECR URL not available"
        
        echo "üìä GitHub Actions Role:"
        terraform output github_actions_role_arn || echo "GitHub role not available"
        
        echo "üöÄ Next Steps:"
        echo "1. Update kubeconfig: aws eks update-kubeconfig --region eu-west-1 --name duka-eks-cluster"
        echo "2. Deploy platform components in dukqa-platform repository"
        echo "3. Configure ArgoCD for GitOps"

    - name: Setup kubectl for verification
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Verify EKS Cluster
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      run: |
        echo "üîç Verifying EKS cluster..."
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name duka-eks-cluster
        kubectl cluster-info
        kubectl get nodes
        kubectl get namespaces